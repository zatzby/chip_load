import tkinter as tk
from tkinter import ttk
from tkinter import simpledialog
from tkinter import messagebox

def calculate_chip_load():
    try:
        feed_rate_m_min = float(feed_rate_entry.get())
        feed_rate_in_min = feed_rate_m_min * 39.37  # Convert m/min to in/min
        rpm = float(rpm_entry.get())
        flutes = float(flutes_entry.get())
        chip_load = feed_rate_in_min / (rpm * flutes)
        result_label.config(text=f"Chip Load: {chip_load:.4f} inches/rev")
        return feed_rate_m_min, rpm, flutes, chip_load
    except ValueError:
        result_label.config(text="Invalid input, please enter numbers only.")
        return None, None, None, None

def save_calculation():
    feed_rate_m_min, rpm, flutes, chip_load = calculate_chip_load()
    material = material_combobox.get()
    if chip_load is not None and material:
        title = simpledialog.askstring("Save Calculation", "Enter title for this calculation:")
        if title:
            calculation_details = (feed_rate_m_min, rpm, flutes, material, chip_load)
            saved_calculations.append(calculation_details)
            saved_calculations_listbox.insert(tk.END, f"{title} - Material: {material}, Chip Load: {chip_load:.4f} inches/rev")
            messagebox.showinfo("Saved", "Calculation saved successfully.")
        else:
            messagebox.showwarning("No Title", "Calculation not saved. Please provide a title.")
    else:
        messagebox.showwarning("Incomplete Data", "Please enter both chip load values and select a material.")

def display_calculation_details(event):
    selection_index = saved_calculations_listbox.curselection()
    if selection_index:
        selected_calculation = saved_calculations[selection_index[0]]
        details_message = f"Feed Rate: {selected_calculation[0]} m/min\n" \
                          f"RPM: {selected_calculation[1]}\n" \
                          f"Number of Flutes: {selected_calculation[2]}\n" \
                          f"Material: {selected_calculation[3]}\n" \
                          f"Chip Load: {selected_calculation[4]:.4f} inches/rev"
        details_window = tk.Toplevel(root)
        details_window.title("Calculation Details")
        details_window.geometry("400x200")  # Set the geometry of the popup window
        tk.Label(details_window, text="Calculation Details", font=('Arial', 16)).pack(pady=10)
        tk.Label(details_window, text=details_message, justify=tk.LEFT, anchor="w").pack(padx=10)
        close_button = ttk.Button(details_window, text="Close", command=details_window.destroy)
        close_button.pack(pady=5)

# Initialize a list to store calculation details
saved_calculations = []

# Create the main window
root = tk.Tk()
root.title("Chip Load Calculator")
root.geometry("900x600")

# Create and place the input fields and labels
feed_rate_label = ttk.Label(root, text="Feed Rate (m/min):")
feed_rate_label.grid(row=0, column=0, padx=5, pady=5)
feed_rate_entry = ttk.Entry(root)
feed_rate_entry.grid(row=0, column=1, padx=5, pady=5)

rpm_label = ttk.Label(root, text="RPM:")
rpm_label.grid(row=1, column=0, padx=5, pady=5)
rpm_entry = ttk.Entry(root)
rpm_entry.grid(row=1, column=1, padx=5, pady=5)

flutes_label = ttk.Label(root, text="Number of Flutes:")
flutes_label.grid(row=2, column=0, padx=5, pady=5)
flutes_entry = ttk.Entry(root)
flutes_entry.grid(row=2, column=1, padx=5, pady=5)

material_label = ttk.Label(root, text="Material:")
material_label.grid(row=3, column=0, padx=5, pady=5)
material_options = ["MDF", "Plywood", "Particle Board", "Laminate", "Other"]
material_combobox = ttk.Combobox(root, values=material_options)
material_combobox.grid(row=3, column=1, padx=5, pady=5)

calculate_button = ttk.Button(root, text="Calculate", command=calculate_chip_load)
calculate_button.grid(row=4, column=0, padx=5, pady=5)

save_button = ttk.Button(root, text="Save Calculation", command=save_calculation)
save_button.grid(row=4, column=1, padx=5, pady=5)

result_label = ttk.Label(root, text="")
result_label.grid(row=5, column=0, columnspan=2, padx=5, pady=10)

saved_calculations_label = ttk.Label(root, text="Saved Calculations:")
saved_calculations_label.grid(row=6, column=0, columnspan=2)
saved_calculations_listbox = tk.Listbox(root, height=6, width=50)
saved_calculations_listbox.grid(row=7, column=0, columnspan=2, padx=5, pady=5)
saved_calculations_listbox.bind('<<ListboxSelect>>', display_calculation_details)

# Define the data for materials and their chip load ranges
materials_data = [
    ("1/4\", 1/2\"", "MDF", "0.001 - 0.005 inches/rev"),
    ("1/4\", 1/2\"", "Plywood", "0.002 - 0.006 inches/rev"),
    ("1/4\"", "Particle Board", "0.001 - 0.004 inches/rev"),
    ("1/8\", 1/4\"", "Laminate", "0.002 - 0.007 inches/rev"),
    ("1/4\", 3/8\", 1/2\"", "Hardwood", "0.002 - 0.008 inches/rev")
]

# Create a frame for the Treeview
materials_frame = ttk.Frame(root)
materials_frame.grid(row=8, column=0, columnspan=2, padx=5, pady=5, sticky="ew")

materials_treeview = ttk.Treeview(materials_frame, columns=("Bit Size", "Material", "Chip Load Range"), show="headings")
materials_treeview.heading("Bit Size", text="Bit Size")  # Moved to the first position
materials_treeview.heading("Material", text="Material")
materials_treeview.heading("Chip Load Range", text="Chip Load Range")
materials_treeview.column("Bit Size", anchor="w")  # Moved to the first position for configuration
materials_treeview.column("Material", anchor="w")
materials_treeview.column("Chip Load Range", anchor="w")

# Insert the updated data into the Treeview
for bit_size, material, chip_load_range in materials_data:
    materials_treeview.insert("", tk.END, values=(bit_size, material, chip_load_range))

materials_treeview.pack(side="left", fill="both", expand=True)

# Add a scrollbar to the Treeview
scrollbar = ttk.Scrollbar(materials_frame, orient="vertical", command=materials_treeview.yview)
scrollbar.pack(side="right", fill="y")
materials_treeview.config(yscrollcommand=scrollbar.set)

# GUI loop start remains unchanged
root.mainloop()